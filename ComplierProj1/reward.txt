1. 为什么引用了.h文件, 可执行程序就知道.h文件中声明的函数的具体实现方式?
    编译器单独编译每个c/cpp文件.将c/cpp文件中引用的.h文件内容复制过来.
    它不关心如何实现, 只关心它的声明(变量名 参数类型 返回值 函数名等).
    当所有cpp文件编译工作完成后, 得到**可重定位的目标文件**, 由链接器符号解析, 以及重定位.
    
    1. 编译器从来不根据.h去找cpp文件
    2. 当编译器编译一个包含了一个类A的头文件a.h的cpp的时候，它不需要知道类A的具体实现是什么，
    它只需要A的定义：包括
    a）A有那些成员变量、这些变量的类型是什么 
    b)A有哪些成员函数，其原型是什么。
    而这些在a.h中全部有，它不需要a.cpp
    3. 当所有cpp文件都被编译后，a.cpp内的所有实现被放到一个叫“符号表”的地方。
    在链接时，所有cpp的内容都在哪儿，链接器只要在那个表里查找a的各个成员函数的地址即可。

2. #ifndef MFT_H 的语义
    如果之前没有#include "mft.h" 则 #include"mft.h"


